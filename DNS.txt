DNS-Domain name system is a protocol that translates human readable domain names(eg:google.com)int IP address(142.245.132.87).It acts like phonebook of the internet alllowin user to access website using domain name instead of numerical IP address.
DNS working architecture:
1.user request:you type google.com in browser.
2.dns resolver:request goes to dns solver
3.root dns server:resolver asks the root dns server where .com domains are located.
4.tld server:resolver than queries the top level domain server.
5.authorative dns server:tld directs the resolver to the authorative dns server for google.com
6.response:the dns server return the ip address to the browser.
7.website loads:browser connects to the ip and loads the website

Types of DNS records:
1.A:maps hostnames to IP addresses
2.NS:maps domain names to name servers
3.CNAME:maps domain names to canonical names
4.AAAA:maps a domain to an IPv6 address

DHCP (Dynamic Host Configuration Protocol):It is responsible for automatically assigning IP addresses to devices in a network. Without DHCP, you’d need to manually configure IP addresses for each device.

DHCP working flow:
1. Discovery: A device (client) connects to a network and broadcasts a DHCP request (DHCPDISCOVER).
2️. Offer: The DHCP server responds with an available IP address lease (DHCPOFFER).
3️. Request: The client accepts the offered IP by sending a DHCPREQUEST message.
4️. Acknowledgment: The DHCP server assigns the IP and confirms (DHCPACK).


Vertical vs. Horizontal Scaling – Key Differences

1. Vertical Scaling (Scaling Up):means adding more resources (CPU, RAM, Storage, etc.) to an existing machine to improve performance.
It works like Upgrade CPU (e.g., from 4-core to 16-core).
Increase RAM (e.g., from 8GB to 64GB).
Upgrade storage (e.g., HDD → SSD → NVMe).
Move to a larger, more powerful server.

Pros of Vertical Scaling
✅ Simple Implementation – No need for complex distributed systems.
✅ Less Maintenance – Fewer machines to manage.
✅ Easier Data Consistency – No need for load balancing or replication.

Cons of Vertical Scaling
❌ Hardware Limits – Every machine has a max upgrade limit.
❌ Single Point of Failure – If the server fails, everything goes down.
❌ Expensive – High-end servers are costly.

When to Use?
✔️ For monolithic applications (e.g., traditional databases, single-node applications).
✔️ When scaling is occasional, and cost is not an issue.

2. Horizontal Scaling (Scaling Out):means adding more machines (nodes) to distribute the load across multiple servers.
How It Works?
Add more servers to handle traffic.
Use load balancers to distribute requests.
Implement database sharding to split data across multiple nodes.
Use caching (Redis, Memcached) to reduce database load.

Pros of Horizontal Scaling
✅ High Availability & Redundancy – If one server fails, others take over.
✅ Infinite Scalability – No hardware limits; just add more servers.
✅ Cost-Effective – Can use cheaper, commodity hardware.

Cons of Horizontal Scaling
❌ Complex Implementation – Requires load balancing, distributed databases, etc.
❌ Data Synchronization Issues – Need replication strategies (e.g., leader-follower databases).
❌ More Maintenance – Managing multiple machines is harder.

When to Use?
✔️ For high-traffic applications (e.g., Google, Facebook, Netflix).
✔️ When demand is unpredictable (e.g., cloud-based services).
✔️ For microservices & distributed architectures.

 Which One Should You Choose?
✔️ Start with Vertical Scaling if you have a small application.
✔️ Use Horizontal Scaling when your app outgrows a single machine.
✔️ Cloud-Based Scaling (Hybrid Approach) – Use auto-scaling cloud services like AWS Auto Scaling, Kubernetes, or Azure Scale Sets for best performance.

What is SSL/TLS?
🔹 SSL (Secure Sockets Layer) and TLS (Transport Layer Security) are cryptographic protocols that provide secure communication between a client (browser) and a server (website).
🔹 TLS is the successor of SSL, and TLS 1.2 & TLS 1.3 are the current standards.
🔹 Websites using HTTPS (https://example.com) have SSL/TLS encryption enabled.

How SSL/TLS Works?
1️⃣ Client Hello:

The client (browser) sends a request to the server, including supported encryption algorithms and a random value.
2️⃣ Server Hello:

The server responds with a selected encryption algorithm, its SSL/TLS certificate, and another random value.
3️⃣ Key Exchange & Authentication:

The client verifies the server's certificate (issued by a Certificate Authority).
A shared secret key is generated using asymmetric encryption.
4️⃣ Secure Communication:

Both parties switch to symmetric encryption for fast, secure communication.
5️⃣ Data Transfer:

Encrypted data is securely exchanged using the shared key.
6️⃣ Connection Termination:

Once the session ends, keys are discarded to prevent reuse.

Symmetric vs. Asymmetric Encryption
📌 Symmetric Encryption (Private Key Encryption)
✔️ Uses a single key for both encryption and decryption.
✔️ Fast & efficient for large data encryption.
✔️ Example algorithms: AES, DES, Blowfish, ChaCha20.

🔹 Example Usage:

Encrypting files (openssl aes-256-cbc)
Secure communication after key exchange in SSL/TLS

Asymmetric Encryption (Public Key Encryption)
✔️ Uses two keys:

Public Key: Used for encryption
Private Key: Used for decryption
✔️ Slower but more secure than symmetric encryption.
✔️ Example algorithms: RSA, ECC, Diffie-Hellman, DSA.
🔹 Example Usage:

SSL/TLS handshake
Digital signatures
Secure email (PGP encryption)

🚀 How SSL/TLS Uses Both?
🔹 Asymmetric encryption (RSA, ECC) is used to securely exchange a shared secret key.
🔹 After the handshake, symmetric encryption (AES, ChaCha20) is used for fast data transfer.
